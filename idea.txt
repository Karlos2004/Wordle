Wordle 구현해야 할 Point

a) Wordle system 구현
전제 : Wordle in New York Times 와 같이 5-lettered words 기반, 대소문자 구분X

0. 입력 단어의 assert - 모두 알파벳으로 구성되어 있다.

1. 입력 단어의 사전 존재 여부 
Q. 사전을 어떻게 끌어올 건지? 외부 링크로 접근 or 특정 파일로 접근? 
A. 일단 5 lettered words list with 5,757 words 기반으로 탐색

2. 정답과의 check
2-1) 같은 자리, 같은 문자 우선적으로 검토
2-2) 사용되지 않은 문자 검토
2-3) 앞에서부터 중복 문자 처리

3. 결과 반환
ex. 실제 wordle 사이트에서 제공하는 결과

I guessed this 5-letter word in 4/6 tries. 

⬛🟨🟨⬛⬛
⬛⬛🟨⬛🟩
⬛⬛🟨🟨🟩
🟩🟩🟩🟩🟩

같은 방식으로 출력하면 될듯.

(optional 4. Wordle 결과 분석 method 추가)
: 이후 다양한 wordle 최적화 풀이법으로 테스트할 때 random하게 실행하고 결과들의 평균치를 반환하는 등의 작업을 수행할 수 있는 method가 있으면 처리할 때 편할 듯.
: 급하지 않으니 나중에 결과 분석 때 만들자. 



b) Wordle의 특징
1. 모음이 포함되는 단어가 많기 때문에, 어떤 모음이 들어가는지 알면 찾기 편하다.

2. 자주 쓰이는 알파벳(e, i, r, s, t, a) 등이 포함된 문자로 시작하면 더 빠르게 찾을 수 있다.

3. endgame 때 가능성 있는 알파벳들을 모두 포함하는 단어로 test하면 2회 안에 확정적으로 찾을 수 있다. (남은 알파벳 수가 4개 이상일 때 효과좋음)

4. 테스트해보지 않은 알파벳 중, 두번째로 등장 가능성이 높은 자음들을 이용해보면 평균적으로 더 잘 찾을 수 있었다.
ex. 남은 단어 중에서 D가 포함된 단어는 10개, L이 포함된 단어는 9개, M이 포함된 단어는 3개 ... 있다면, D보다 L과 M을 사용해서 테스트해보자. 

5. 가능성이 높은 순이라면 첫 단어가 고정될 것이다.

6. 초기 시작 단어는 slate, cares, salet

c) Wordle 최적화
1. frequency analysis(암호학 terminology)
: 전체 사전 중에서 각 알파벳이 사용된 횟수를 이용하여 확률적으로 등장하기 쉬운 알파벳부터 우선적으로 검토
: 알파벳별 순위에 따라서 전부 or 가장 많이 포함하고 있는 단어들을 우선적으로 선별

2. distinct한 여러 문자를 사용
: STARE - DOING - LUCKY ..
: 전반적으로 성능이 잘 나오지만, 저격 데이터가 존재
(or distinct한 문자열 조합을 몇 개 찾고서 random하게 선택하는 것도 고려할 수 있지 않을까?)

3. 남아있는 후보들에 대해서 그룹에 대한 scoring
: 좋은 partition일수록, log scale로 계산할 수 있을듯
: 초기 단어는 따로 제공하여, possible set을 크기를 많이 제거하고 시작

4. 모음 기반 find -- audio, adieu
: 모음부터 조사하고 가능한 자음을 나중에 해결
: 자음만 존재하는 단어 / 비슷한 꼴의 단어
ex) ?LA?E // 가능한 자음들 조합만 너무 많음

5. j-th character(1<=j<=5)로 가능한 알파벳을 관리
: 매 query마다 각 자리에 들어갈 수 있는 알파벳을 만족하면서 단어를 select
: 

6. score 위주로 코딩?
: 1) Grey는 포함하지 않음 2) B, Y를 포함하면 점수 부여 3) 새로운 정보면 더 높은 점수

> time complexity를 줄이는 idea? 
확정된 위치를 제외하고, 나머지 부분에 대해서 알파벳별 빈도를 계산해서 접근한다

> 하나의 단어를 계산하는 데 필요한 연산량(..)
exponential하게 단어를 제거할 수 있다는 가정(by partitioning) -- p의 배율로 계속 decrease
Q : 질문 횟수, N : 단어 수 (~13,000), j : 두 단어를 compare하는 데 필요한 연산량, p : exponential base

연산량 = NQ + j* sigma(i=0 to Q){P_(i)} ~ NQ + j*sigma(i=0 to Q){N*p**(i)}
N*P**Q = 1 적용 => Q = -log_{p}{N}, p = N**{-1/Q}
i) p = 0.3일 때, sigma ~ 18,500, 전체 연산량 ~ 2.86e+5 => N번 순회하면, ~3.72e+9
ii) p = 0.6일 때, sigma ~ 32,000, 전체 연산량 ~ 5.59e+5 => N번 순회하면 ~7.23e+9
iii) p = 0.7일 때, sigma ~ 43,000, 전체 연산량 ~ 7.71e+5 => N번 순회하면 ~1e+10

5번만에 끝나려면 대략 p = 0.15, 4번안에 끝나려면 p ~ 0.094

d) 프로젝트 진행 계획
: 시간 초과가 걸리지 않다는 전제 하에, c-3) idea로 진행

i번째 guess 후의 정답 후보군을 P(i)라고 하면, 구현 때는 set으로, N번 순회해서 check

순회할 때 check해야 할 목록
1) 등장하는 알파벳들  
2) 전체 word list에 대해서 등장하는 알파벳

분류방법 : ⓐ 가장 많이 등장하는 패턴의 확률의 min. ⓑ 패턴의 확률에 대한 average ⓒ 패턴의 확률 variance를 기준으로 evaluate
partition 후에 최선의 선택지가 여러개 있을 때, (나중에 고민)